<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ page import="org.apache.commons.httpclient.*"%>
<%@ page import="org.apache.commons.httpclient.methods.*"%>
<%@ page import="java.net.URLEncoder"%>
<%@ page
   import="org.json.simple.JSONArray, org.json.simple.JSONObject, java.util.Iterator"%>
<%@ page import="java.util.*,java.net.*"%>
<%@ page import="java.io.InputStream"%>
<%@ page import="org.w3c.dom.Document"%>
<%@ page import="org.w3c.dom.Node"%>
<%@ page import="org.w3c.dom.Element"%>
<%@ page import="org.w3c.dom.NodeList"%>
<%@ page import="javax.xml.parsers.DocumentBuilder"%>
<%@ page import="javax.xml.parsers.DocumentBuilderFactory"%>
<%
   response.setContentType("text/html; charset=UTF-8");
   request.setCharacterEncoding("UTF-8");

   String AppName = URLEncoder.encode("Project", "UTF-8");

   String myKey = "c2Upzg2FZyz%2F%2BB44%2BGYXG4BjpcHvJ%2FrOfnmfxxK4EmMlLRoVR22CLY%2F%2B6yGKkUoU6GdCNKZtBDyYwF0DOLdaeQ%3D%3D";

   String ApiUrl = "http://api.visitkorea.or.kr/openapi/service/rest/KorService/detailCommon?ServiceKey="
         + myKey + "&contentTypeId=39&contentId=134655&MobileOS=ETC&MobileApp=" + AppName
         + "&defaultYN=Y&firstImageYN=Y&areacodeYN=Y&catcodeYN=Y&addrinfoYN=Y&mapinfoYN=Y&overviewYN=Y&transGuideYN=Y ";
   System.out.println(myKey);
   HttpURLConnection conn = null;
   JSONArray jsonArray = new JSONArray();
   //String commandType = request.getParameter("commandType");
   String commandType = "food_9";
   System.out.println(commandType);

   if (commandType.equals("food_9")) {

      URL url = new URL(ApiUrl);
      conn = (HttpURLConnection) url.openConnection();
      DocumentBuilderFactory factory = DocumentBuilderFactory
            .newInstance();
      //1. 문서를 읽기위한 공장을 만들어야 한다.

      DocumentBuilder builder = factory.newDocumentBuilder();
      //2. 빌더를 생성

      Document doc = builder.parse(conn.getInputStream());
      //3. 생성된 빌더를 통해서 xml문서를 Document객체로 파싱해서 가져온다.

      Element root = doc.getDocumentElement();
      System.out.println("ROOT : " + root.getNodeName());

      //Root의 자식노드 구하기
      NodeList all = root.getChildNodes();
      System.out
            .println("root의 ChildrenNode의 수 : " + all.getLength());

      for (int i = 0; i < all.getLength(); i++) {
         Node node = all.item(i);
         System.out.println("ChildrenNode : " + node.getNodeName());
      }

      NodeList n_list = root.getElementsByTagName("items");
      Element items = (Element) n_list.item(0);
      Node s_node = n_list.item(0);
      NodeList s_list = s_node.getChildNodes();

      for (int i = 0; i < s_list.getLength(); i++) {
         Element body1 = (Element) s_list.item(i);
         //System.out.println(body1);
      }
            
      for (int i = 0; i < s_list.getLength(); i++) {
         JSONObject jobj = new JSONObject();
         NodeList firstimage = items.getElementsByTagName("firstimage");
         NodeList title = items.getElementsByTagName("title");
         NodeList overview = items.getElementsByTagName("overview");
         Element el_firstimage = (Element) firstimage.item(i);
         Element el_title = (Element) title.item(i);
         Element el_overview = (Element)overview.item(i);
         if(el_firstimage==null){
            break;
         }
         Node t_firstimage = el_firstimage.getFirstChild();
         Node t_title = el_title.getFirstChild();
         Node t_overview = el_overview.getFirstChild();
         
         System.out.println(t_firstimage.getNodeValue());
         
         jobj.put("firstimage", t_firstimage.getNodeValue());
         jobj.put("title", t_title.getNodeValue());
         jobj.put("overview", t_overview.getNodeValue());
         jsonArray.add(jobj); 
      }
      out.print(jsonArray.toJSONString());
   }
%>